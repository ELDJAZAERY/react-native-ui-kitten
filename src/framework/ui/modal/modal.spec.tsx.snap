// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@modal component checks * modal closes on passed prop 1`] = `
<View
  accessible={true}
  component={
    <View>
      <Text>
        Test1
      </Text>
      <Button
        onPress={[MockFunction]}
        title="Close Modal"
      />
    </View>
  }
  identifier="modal-test-identifier-1"
  isBackDropAllowed={true}
  onCloseModal={[MockFunction]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "alignItems": "center",
        "justifyContent": "center",
        "position": "absolute",
      },
      undefined,
    ]
  }
  visible={true}
>
  <View
    onCloseModal={[Function]}
  >
    <Text>
      Test1
    </Text>
    <View
      accessibilityRole="button"
      accessibilityStates={Array []}
      accessible={true}
      isTVSelectable={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Close Modal
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`@modal component checks * modal closes on passed prop 2`] = `
<View
  accessible={true}
  component={
    <View>
      <Text>
        Test1
      </Text>
      <Button
        onPress={
          [MockFunction] {
            "calls": Array [
              Array [
                undefined,
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        title="Close Modal"
      />
    </View>
  }
  identifier="modal-test-identifier-1"
  isBackDropAllowed={true}
  onCloseModal={
    [MockFunction] {
      "calls": Array [
        Array [
          undefined,
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "alignItems": "center",
        "justifyContent": "center",
        "position": "absolute",
      },
      undefined,
    ]
  }
  visible={true}
>
  <View
    onCloseModal={[Function]}
  >
    <Text>
      Test1
    </Text>
    <View
      accessibilityRole="button"
      accessibilityStates={Array []}
      accessible={true}
      isTVSelectable={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Close Modal
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`@modal component checks * modal component close on backDrop checks 1`] = `
<View
  accessible={true}
  component={
    <View>
      <Text>
        Test1
      </Text>
    </View>
  }
  identifier="modal-test-identifier-1"
  isBackDropAllowed={true}
  onCloseModal={[MockFunction]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "alignItems": "center",
        "justifyContent": "center",
        "position": "absolute",
      },
      undefined,
    ]
  }
  visible={true}
>
  <View
    onCloseModal={[Function]}
  >
    <Text>
      Test1
    </Text>
  </View>
</View>
`;

exports[`@modal component checks * modal component close on backDrop checks 2`] = `
<View
  accessible={true}
  component={
    <View>
      <Text>
        Test1
      </Text>
    </View>
  }
  identifier="modal-test-identifier-1"
  isBackDropAllowed={true}
  onCloseModal={
    [MockFunction] {
      "calls": Array [
        Array [
          "modal-test-identifier-1",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "alignItems": "center",
        "justifyContent": "center",
        "position": "absolute",
      },
      undefined,
    ]
  }
  visible={true}
>
  <View
    onCloseModal={[Function]}
  >
    <Text>
      Test1
    </Text>
  </View>
</View>
`;

exports[`@modal component checks * modal component renders properly 1`] = `
<View
  component={
    <View>
      <Text>
        Test1
      </Text>
    </View>
  }
  identifier="modal-test-identifier-1"
  isBackDropAllowed={false}
  onCloseModal={[Function]}
  style={
    Array [
      Object {
        "alignItems": "center",
        "justifyContent": "center",
        "position": "absolute",
      },
      undefined,
    ]
  }
  visible={true}
>
  <View
    onCloseModal={[Function]}
  >
    <Text>
      Test1
    </Text>
  </View>
</View>
`;

exports[`@modal component checks * modal component renders properly 2`] = `null`;
